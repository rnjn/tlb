<?xml version="1.0"?>
<project name="tlb-server" basedir="..">
    <property name="server.dir" location="${basedir}/server"/>
    <property name="server.src.dir" location="${server.dir}/src"/>
    <property name="server.test.dir" location="${server.dir}/test"/>
    <property name="server.lib.dir" location="${lib.dir}/server"/>

    <property name="server.target.dir" location="${target.dir}/server"/>
    <property name="server.classes.dir" location="${server.target.dir}/classes"/>
    <property name="server.test.classes.dir" location="${server.target.dir}/test-classes"/>
    <property name="server.test.reports.dir" location="${server.target.dir}/reports"/>

    <path id="server.dependencies">
        <fileset dir="${server.lib.dir}" includes="*.jar" id="server.dependencies.fileset"/>
    </path>

    <path id="server.src.classpath">
        <pathelement path="${server.classes.dir}"/>
        <pathelement path="${restlet.classes.dir}"/>
        <pathelement path="${core.classes.dir}"/>
        <path refid="server.dependencies"/>
        <path refid="restlet.dependencies"/>
        <path refid="core.dependencies"/>
    </path>

    <path id="server.test.classpath">
        <pathelement path="${server.test.classes.dir}"/>
        <pathelement path="${restlet.test.classes.dir}"/>
        <pathelement path="${core.test.classes.dir}"/>
        <path refid="server.src.classpath"/>
        <path refid="test.dependencies"/>
    </path>

    <target name="server.init">
        <mkdir dir="${server.classes.dir}"/>
        <mkdir dir="${server.test.classes.dir}"/>
        <mkdir dir="${server.test.reports.dir}"/>
    </target>

    <target name="server.compile" depends="init, restlet.compile">
        <javac destdir="${server.classes.dir}" target="1.5" source="1.5" debug="true" includeantruntime="false">
            <classpath refid="server.src.classpath"/>
            <src path="${server.src.dir}"/>
        </javac>
    </target>

    <target name="server.compile.tests" depends="server.compile, init, restlet.compile.tests">
        <javac destdir="${server.test.classes.dir}" target="1.5" source="1.5" includeantruntime="false">
            <classpath refid="server.test.classpath"/>
            <src path="${server.test.dir}"/>
        </javac>
    </target>

    <target name="server.test" depends="server.compile.tests, server.compile">
        <junit failureproperty="test.failure" printsummary="yes" haltonfailure="true" fork="true">
            <classpath refid="emma.classpath"/>
            <jvmarg value="-Demma.coverage.out.file=${server.emma.file}"/>
            <jvmarg value="-Demma.coverage.out.merge=true"/>

            <classpath refid="server.test.classpath"/>
            <batchtest todir="${server.test.reports.dir}">
                <fileset dir="${server.test.classes.dir}" includes="**/*Test.class*"/>
                <formatter type="plain"/>
            </batchtest>
        </junit>
    </target>

    <target name="server.test.perf" depends="server.test.lowmem"/>

    <target name="server.test.lowmem" depends="server.compile.tests, server.compile">
        <junit failureproperty="test.failure" printsummary="yes" haltonfailure="true" fork="true">
            <classpath refid="emma.classpath"/>
            <jvmarg value="-Xms30m"/>
            <jvmarg value="-Xmx30m"/>
            <jvmarg value="-Demma.coverage.out.file=${server.emma.file}"/>
            <jvmarg value="-Demma.coverage.out.merge=true"/>

            <classpath refid="server.test.classpath"/>
            <batchtest todir="${server.test.reports.dir}">
                <fileset dir="${server.test.classes.dir}" includes="**/*_LowMem.class*"/>
                <formatter type="plain"/>
            </batchtest>
        </junit>
    </target>

    <target name="emma.instr.server" depends="server.compile">
        <emma-instr classes-dir="${server.classes.dir}" name="server"/>
    </target>
</project>
